git:
  branches:
    - master
    - release-*
  tags: true
  pull_requests: true

defaults:
  environment:
    DOCKER_BUILDKIT: '1'
  max_parallel_jobs: 4

notifications:
  slack:
    channel: '#test'
    webhook_url: ...

steps:
  - name: run tests and linting
    environment:
      COMPOSE_PROJECT_NAME: myapp-$CURRENT_JOB_ID
    steps:
      - docker-compose up --detatch
      - docker build --tag myapp-test:$CURRENT_JOB_ID --target=dev .
      - run_in: docker
        docker_image: myapp-test:$CURRENT_JOB_ID
        docker_args: --env-file=docker.env --network=host
        steps:
          - black --check *.py
          - pylint --errors-only *.py
          - pytest --cov myapp --cov-report xml --cov-report html
        archive_files:
          - coverage.xml
          - htmlcov
    steps_on_cleanup:
      - docker-compose rm -fsv
      - docker rmi -f myapp-test:$CURRENT_JOB_ID

  - end_if: test $GIT_BRANCH != 'master'

  - name: build and push production image
    steps:
      - docker build --tag $DOCKER_REGISTRY_URL/myapp:$CURRENT_JOB_ID .
      - docker push $DOCKER_REGISTRY_URL/myapp:$CURRENT_JOB_ID

  - name: deploy to test environment
    run_in: ssh
    ssh_host: test.myapp.mywork.com
    steps:
      - deploy-docker-container.sh $CURRENT_JOB_ID
      - run-smoke-tests.sh
    max_parallel_jobs: 1

  - name: deploy to production environment
    run_in: ssh
    ssh_host: prod.myapp.mywork.com
    steps:
      - deploy-docker-container.sh $CURRENT_JOB_ID
      - run-smoke-tests.sh
    steps_on_failure:
      - deploy-docker-container.sh $PREVIOUS_SUCCESSFUL_JOB_ID
    notify: true
    max_parallel_jobs: 1
